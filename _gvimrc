" vim:set ts=8 sts=2 sw=2 tw=0: (この行に関しては:help modelineを参照)
"
" An example for a Japanese version gvimrc file.
" 日本語版のデフォルトGUI設定ファイル(gvimrc)
"
" Last Change: 2018-11-12.
" Maintainer:  MURAOKA Taro <koron.kaoriya@gmail.com>
"
" 解説:
" このファイルにはVimの起動時に必ず設定される、GUI関連の設定が書かれていま
" す。編集時の挙動に関する設定はvimrcに書かかれています。
"
" 個人用設定は_gvimrcというファイルを作成しそこで行ないます。_gvimrcはこの
" ファイルの後に読込まれるため、ここに書かれた内容を上書きして設定することが
" 出来ます。_gvimrcは$HOMEまたは$VIMに置いておく必要があります。$HOMEは$VIM
" よりも優先され、$HOMEでみつかった場合$VIMは読込まれません。
"
" 管理者向けに本設定ファイルを直接書き換えずに済ませることを目的として、サイ
" トローカルな設定を別ファイルで行なえるように配慮してあります。Vim起動時に
" サイトローカルな設定ファイル($VIM/gvimrc_local.vim)が存在するならば、本設
" 定ファイルの主要部分が読み込まれる前に自動的に読み込みます。
"
" 読み込み後、変数g:gvimrc_local_finishが非0の値に設定されていた場合には本設
" 定ファイルに書かれた内容は一切実行されません。デフォルト動作を全て差し替え
" たい場合に利用して下さい。
"
" 参考:
"   :help gvimrc
"   :echo $HOME
"   :echo $VIM
"   :version

"---------------------------------------------------------------------------
" サイトローカルな設定($VIM/gvimrc_local.vim)があれば読み込む。読み込んだ後
" に変数g:gvimrc_local_finishに非0な値が設定されていた場合には、それ以上の設
" 定ファイルの読込を中止する。
if 1 && filereadable($VIM . '/gvimrc_local.vim')
  source $VIM/gvimrc_local.vim
  if exists('g:gvimrc_local_finish') && g:gvimrc_local_finish != 0
    finish
  endif
endif

"---------------------------------------------------------------------------
" ユーザ優先設定($HOME/.gvimrc_first.vim)があれば読み込む。読み込んだ後に変
" 数g:gvimrc_first_finishに非0な値が設定されていた場合には、それ以上の設定
" ファイルの読込を中止する。
if 0 && exists('$HOME') && filereadable($HOME . '/.gvimrc_first.vim')
  unlet! g:gvimrc_first_finish
  source $HOME/.gvimrc_first.vim
  if exists('g:gvimrc_first_finish') && g:gvimrc_first_finish != 0
    finish
  endif
endif

"---------------------------------------------------------------------------
" Bram氏の提供する設定例をインクルード (別ファイル:vimrc_example.vim)。これ
" 以前にg:no_gvimrc_exampleに非0な値を設定しておけばインクルードしない。
if 1 && (!exists('g:no_gvimrc_example') || g:no_gvimrc_example == 0)
  source $VIMRUNTIME/gvimrc_example.vim
endif

"---------------------------------------------------------------------------
" カラー設定:
"colorscheme morning
" Background Color を クリーム色に (最も目が疲れにくいらしい)
highlight Normal guibg=#fafad2

hi Identifire guifg=darkcyan gui=bold
hi Identifier guifg=darkcyan gui=bold
hi Statement guifg=darkmagenta
hi Type guifg=darkgreen
hi Constant guifg=red
hi Special guifg=red
hi Cursor guibg=Orange guifg=NONE
hi Error guibg=red guifg=black

" 差分表示の色使いを見易くなるように変更
hi DiffText   gui=NONE guifg=darkred guibg=lightgreen
hi DiffChange gui=NONE guifg=#006800 guibg=#d0ffd0
hi DiffAdd gui=NONE guifg=#2020ff guibg=#c8f2ea
hi DiffDelete gui=NONE guifg=#f83010 guibg=#ffeae0

" git 関係
hi gitcommitComment guifg=blue
hi gitcommitOnBranch guifg=blue
hi gitcommitUntracked guifg=blue
hi gitcommitDiscarded guifg=blue
hi gitcommitSelected guifg=blue
hi gitcommitUnmerged guifg=blue

"---------------------------------------------------------------------------
" フォント設定:
"
if has('win32')
  " Windows用
  "set guifont=terminal:h11:cSHIFTJIS
  " 行間隔の設定
  set linespace=1
  " 一部のUCS文字の幅を自動計測して決める
  if has('kaoriya')
    set ambiwidth=auto
  endif
elseif has('mac')
  set guifont=Osaka－等幅:h14
elseif has('xfontset')
  " UNIX用 (xfontsetを使用)
  set guifontset=a14,r14,k14
endif

"---------------------------------------------------------------------------
" ウインドウに関する設定:
"
" ウインドウの幅
set columns=80
" ウインドウの高さ
set lines=25
" コマンドラインの高さ(GUI使用時)
set cmdheight=2
" 画面を黒地に白にする (次行の先頭の " を削除すれば有効になる)
"colorscheme evening " (GUI使用時)

"---------------------------------------------------------------------------
" encoding に関する設定
" Gvim では ctermencoding が cp932 に設定されてしまうので再設定する。
set encoding=utf-8
let &termencoding = &encoding

"  内部コード encoding を utf-8 に変更する場合、ファイルメニューが化ける
"  ことがある。その対策
source $VIMRUNTIME/delmenu.vim
set langmenu=ja_JP.utf-8
source $VIMRUNTIME/menu.vim 

"---------------------------------------------------------------------------
" 日本語入力に関する設定:
"
if has('multi_byte_ime') || has('xim')
  " IME ON時のカーソルの色を設定(設定例:紫)
  highlight CursorIM guibg=Purple guifg=NONE
  " 挿入モード・検索モードでのデフォルトのIME状態設定
  set iminsert=0 imsearch=0
  if has('xim') && has('GUI_GTK')
    " XIMの入力開始キーを設定:
    " 下記の s-space はShift+Spaceの意味でkinput2+canna用設定
    " set imactivatekey=s-space
  endif
endif

"---------------------------------------------------------------------------
" マウスに関する設定:
"
" 解説:
" mousefocusは幾つか問題(一例:ウィンドウを分割しているラインにカーソルがあっ
" ている時の挙動)があるのでデフォルトでは設定しない。Windowsではmousehide
" が、マウスカーソルをVimのタイトルバーに置き日本語を入力するとチラチラする
" という問題を引き起す。
"
" どのモードでもマウスを使えるようにする
set mouse=a
" マウスの移動でフォーカスを自動的に切替えない (mousefocus:切替る)
set nomousefocus
" 入力時にマウスポインタを隠す (nomousehide:隠さない)
set mousehide
" ビジュアル選択(D&D他)を自動的にクリップボードへ (:help guioptions_a)
set guioptions+=a

"---------------------------------------------------------------------------
" メニューに関する設定:
"
" 解説:
" "M"オプションが指定されたときはメニュー("m")・ツールバー("T")供に登録され
" ないので、自動的にそれらの領域を削除するようにした。よって、デフォルトのそ
" れらを無視してユーザが独自の一式を登録した場合には、それらが表示されないと
" いう問題が生じ得る。しかしあまりにレアなケースであると考えられるので無視す
" る。
"
if &guioptions =~# 'M'
  let &guioptions = substitute(&guioptions, '[mT]', '', 'g')
endif

" ツールバーを非表示にする
set guioptions -=T

"---------------------------------------------------------------------------
" その他、見栄えに関する設定:
"
" 検索文字列をハイライトしない(_vimrcではなく_gvimrcで設定する必要がある)
"set nohlsearch

"---------------------------------------------------------------------------
" 印刷に関する設定:
"
" 注釈:
" 印刷はGUIでなくてもできるのでvimrcで設定したほうが良いかもしれない。この辺
" りはWindowsではかなり曖昧。一般的に印刷には明朝、と言われることがあるらし
" いのでデフォルトフォントは明朝にしておく。ゴシックを使いたい場合はコメント
" アウトしてあるprintfontを参考に。
"
" 参考:
"   :hardcopy
"   :help 'printfont'
"   :help printing
"
" 印刷用フォント
if has('printer')
  if has('win32')
    "set printfont=ＭＳ_明朝:h12:cSHIFTJIS
    "set printfont=ＭＳ_ゴシック:h12:cSHIFTJIS
    "set printfont=ＭＳ_ゴシック:h10:cSHIFTJIS
  endif
endif

" Copyright (C) 2009-2016 KaoriYa/MURAOKA Taro

"---------------------------------------------------------------------------
" タイトルを表示
set title

"---------------------------------------------------------------------------
" 差分表示
" diff の差分位置移動用として ToolBar に icon を追加
if &diff
  amenu icon=tb_diff_next ToolBar.tb_diff_next ]c
  amenu icon=tb_diff_prev ToolBar.tb_diff_prev [c
  tmenu ToolBar.tb_diff_next 次の差分へ
  tmenu ToolBar.tb_diff_prev 前の差分へ
endif

"---------------------------------------------------------------------------
" Window位置の保存と復帰
if 1 && has('gui_running')
  let s:infofile = '~/.window.vim'

  function! s:WinPosSizeSave(filename)
    redir @a
    winpos
    redir END
    let px = substitute(@a, '.*X \(\d\+\).*', '\1', '') + 0
    let py = substitute(@a, '.*Y \(\d\+\).*', '\1', '') + 0
    execute 'redir! >'.a:filename
    if px > 0 && py > 0
      echo 'winpos '.px.' '.py
    endif
    echo 'set lines='.&lines.' columns='.&columns
    redir END
  endfunction

  augroup WinPosSizeSaver
  autocmd!
  augroup END
  execute 'autocmd WinPosSizeSaver VimLeave * call s:WinPosSizeSave("'.s:infofile.'")'
  if filereadable(expand(s:infofile))
    execute 'source '.s:infofile
  endif
  unlet s:infofile
endif

"----------------------------------------------------------------------------------
if version >= 700
  " メニューの文字化け防止
  "source $VIM/runtime/encode_japan.vim
  " カーソルの行末位置
  set virtualedit=block
endif

"---------------------------------------------------------------------------
" mail ファイルを開く時、ヘッダや引用部の折畳みを行う
let g:mail_fold_enable = 1

"--------------------------------------------------------------------------
" NeoBundle した各プラグインの gvim用の設定
"---------------------------------------------------------
"---------------------------------------------------------
" vim-clang
let g:clang_vim_exec = 'gvim'
let g:clang_dotfile = '_clang'
let g:syntastic_clang_check_config_file = '_clang'

