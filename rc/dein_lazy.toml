[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = ['vim', 'ruby', 'eruby']

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = ['ruby', 'eruby']
if = 1

[[plugins]]
repo = 'tkatsu/vim-erblint'
rev = 'master'
on_ft = ['eruby']
if = 1
hook_source = '''
    autocmd BufWritePost *.erb ErbLint
'''

[[plugins]]
repo = 'ngmy/vim-rubocop'
on_ft = ['ruby']
if = 1
hook_source = '''
  " syntastic for Ruby
  if dein#tap('syntastic')
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 0
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_wq = 0
    let g:syntastic_mode_map = { 'mode': 'passive', 'passive_filetypes': ['ruby'] }
    let g:syntastic_ruby_checkers=['rubocop']
    let g:syntastic_debug=0

    autocmd BufWritePost *.rb SyntasticCheck
  end
'''

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown']
depends = ['previm', 'open-browser.vim']
hook_source = '''
  highlight link htmlItalic LineNr
  highlight link htmlBold WarningMsg
  highlight link htmlBoldItalic ErrorMsg
  au BufRead,BufNewFile *.{md,mkd} set filetype=markdown
  if g:uname =~? 'WINDOWS' || g:uname =~? 'MINGW'
    let g:previm_open_cmd='C:\\Program\ Files\ (x86)\\Google\\Chrome\\Application\\chrome.exe'
    "let g:previm_open_cmd = 'C:\\Program\ Files\\Mozilla\ Firefox\\firefox.exe'
  elseif g:uname =~? 'Linux'
    let g:previm_open_cmd = 'firefox'
  elseif g:uname =~? 'Mac'
    " T.B.D
  endif
  let g:vim_markdown_folding_disabled=1
  let g:previm_show_header=0
'''

[[plugins]]
repo = 'kannokanno/previm'
on_source = 'markdown'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_source = 'previm'

[[plugins]]
repo = 'scrooloose/nerdtree'
if = 0
 
[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
if = ''' 1 && has('lua') '''
hook_source = '''
  let g:neocomplete#enable_at_startup = 1
  if !exists('g:neocomplete#text_mode_filetypes')
    let g:neocomplete#text_mode_filetypes = {}
  endif
  let g:neocomplete#text_mode_filetypes['memo'] = 1
  let g:neocomplete#text_mode_filetypes['mail'] = 1
  " 全てのファイルタイプで有効にするには以下を
  "let g:neocomplete#text_mode_filetypes = { "_" : 1 }

  " Dictionary
  "
  let $VIMDICT =  g:vimfiles_dir . '/dict'
  let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'plantuml' : $VIMDICT . '/plantuml.dict',
      \}
'''

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'tkatsu/vim-c-snippets'
depends = ['neosnippet-snippets', 'vim-snippets', 'neocomplete.vim']
if = 1
on_ft = ['c']
hook_source = '''
  let g:my_copyright_name = 'My Corpolation.'
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'vim-snippets', 'neocomplete.vim']
on_i = 1
if = ''' dein#tap('neocomplete.vim') '''
hook_source = '''
  " Plugin key-mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  "imap <expr><TAB>
  " \ pumvisible() ? "\<C-n>" :
  " \ neosnippet#expandable_or_jumpable() ?
  " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif

  " Honza's Snippets
  " Enable snipMate compatibility feature.
  let g:neosnippet#enable_snipmate_compatibility = 1
  " Tell Neosnippet about the other snippets
  let g:neosnippet#snippets_directory = dein#get('vim-snippets').path
                                        \ . '/snippets'
  if isdirectory(expand('~/my-vim-snippets'))
    let g:neosnippet#snippets_directory .= ',' . expand('~/my-vim-snippets')
  endif

'''

[[plugins]]
repo = 'Konfekt/Fastfold'

[[plugins]]
repo = 'scrooloose/syntastic'
on_ft = ['ruby']

[[plugins]]
#repo = 'justmao945/vim-clang'
# オリジナルに対し、不要なダイアログが表示されることへの回避策を追加
repo = 'tkatsu/vim-clang'
on_ft = ['c','cpp']
depends = ['neocomplete.vim', 'syntastic', 'neosnippet.vim']
if = ''' 0 && dein#tap('neocomplete.vim') '''
hook_source = '''
  " neocomplete の設定
  " 'Shougo/neocomplete.vim' {{{
  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  let g:neocomplete#force_overwrite_completefunc = 1
  let g:neocomplete#force_omni_input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
  let g:neocomplete#force_omni_input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
  " }}}

  " 'justmao945/vim-clang' {{{

  " disable auto completion for vim-clang
  let g:clang_auto = 0
  let g:clang_complete_auto = 0
  let g:clang_auto_select = 0
  let g:clang_use_library = 1

  " default 'longest' can not work with neocomplete
  let g:clang_c_completeopt   = 'menuone'
  let g:clang_cpp_completeopt = 'menuone'

  if executable('clang')
      let g:clang_exec = 'clang'
  elseif executable('clang-3.9')
      let g:clang_exec = 'clang-3.9'
  elseif executable('clang-3.8')
      let g:clang_exec = 'clang-3.8'
  elseif executable('clang-3.7')
      let g:clang_exec = 'clang-3.7'
  else
      let g:clang_exec = 'clang'
  endif

  let g:clang_c_options = '-std=gnu11'
  let g:clang_cpp_options = '-std=c++0x'
  let g:clang_debug = 0

  " }}}

  if executable('clang-format')
      let g:clang_format_exec = 'clang-format'
  elseif executable('clang-format-3.9')
      let g:clang_format_exec = 'clang-format-3.9'
  elseif executable('clang-format-3.8')
      let g:clang_format_exec = 'clang-format-3.8'
  elseif executable('clang-format-3.7')
      let g:clang_format_exec = 'clang-format-3.7'
  else
      let g:clang_format_exec = 'clang-format'
  endif

  "let g:clang_format_style="{BasedOnStyle: llvm, IndentWidth: 4, BreakBeforeBraces: Linux}"
  "let g:clang_format_style="{BasedOnStyle: webkit}"
  " file を指定するとフォーマットの設定は '_clang-format'が使われる。
  let g:clang_format_style='file'

  " syntastic for c++
  if dein#tap('syntastic')
    let g:clang_check_syntax_auto=1
    let g:syntastic_cpp_compiler='clang++'
    let g:syntastic_c_compiler='clang'
    let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libc++'
    let g:syntastic_cpp_check_header=0
    let g:syntastic_cpp_checkers=['clang_check', 'cppcheck']
    let g:syntastic_c_checkers=['clang_check', 'cppcheck']
    let g:syntastic_cpp_checkers=['cppcheck']
    let g:syntastic_c_checkers=['cppcheck']
    let g:syntastic_debug=0

    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 0
    "let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0
    "autocmd BufWinEnter,BufWritePost *.cpp,*.c SyntasticCheck
  end
'''

[[plugins]]
# ファイル全体ではなく、範囲を指定して ClangFormat する。
#repo = 'rhysd/vim-clang-format'
repo = 'tkatsu/vim-clang-format'
# オリジナルに対し、 vimproc と一緒に使うとエラーになることへの回避策を追加
on_ft = ['c', 'cpp', 'h']
depends = ['vim-operator-user']
if = ''' dein#tap('vim-clang') '''
hook_source = '''
  map ,x    <Plug>(operator-clang-format)
'''

[[plugins]]
repo = 'Shougo/neoinclude.vim'
depends = ['neocomplete.vim']
on_i = 1
if = ''' 1 && dein#tap('neocomplete.vim') '''

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
#repo = 'OmniSharp/omnisharp-vim'
#オリジナルに対し、OmniServer がスタートするのを待つことを促すダイアログを追加
repo = 'tkatsu/omnisharp-vim'
depends = ['neocomplete.vim', 'syntastic', 'vim-dispatch', 'ultisnips','unite.vim']
if = ''' 0 && has('python') && !has('unix') && dein#tap('neocomplete.vim') '''
timeout = 1800
on_ft = ['cs']
hook_source = '''
    exec 'source ' . g:vimfiles_dir . '/omnisharprc.vim'
'''
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'MSBuild.exe server/OmniSharp.sln /p:Platform="Any CPU"'
  else
    let cmd = 'xbuild server/OmniSharp.sln'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'SirVer/ultisnips'
if = ''' has('python') '''

[[plugins]]
repo = 'wordijp/NeoDebug'
on_ft = ['c', 'cpp']
if = 0
